openapi: 3.0.3
info:
  title: FeedBackForward
  version: 1.0.0
  contact: {}
servers:
  - url: '{{server-ip}}'
paths:
  /api/users:
    post:
      tags:
        - Users
      summary: createUser
      description: createUser
      operationId: createuser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: abrandnewemail@gmail.com
                password:
                  type: string
                  example: helloworld
                username:
                  type: string
                  example: abrandnewusername
            examples:
              createUser:
                value:
                  email: abrandnewemail@gmail.com
                  password: helloworld
                  username: abrandnewusername
      responses:
        '200':
          description: ''
      security:
        - {}
  /api/users/login:
    post:
      tags:
        - Users
      summary: userLogin
      description: userLogin
      operationId: userlogin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: helloworld
                username:
                  type: string
                  example: testtesttest
            examples:
              userLogin:
                value:
                  password: helloworld
                  username: testtesttest
      responses:
        '200':
          description: ''
      security:
        - {}
  /api/users/{user_name}:
    get:
      tags:
        - Users
      summary: getUserByUsername
      description: getUserByUsername
      operationId: getuserbyusername
      parameters:
        - name: asd
          in: header
          schema:
            type: string
            example: >-
              Bearer
              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NmEzYjAyM2E5YWZlYWFhOWM3MTIxMSIsInVzZXJuYW1lIjoidGVzdHRlc3R0ZXN0IiwiaWF0IjoxNzE5Nzk1NjA1LCJleHAiOjE3MTk3OTkyMDV9.EHZuTmPFDt9pIVNSk4808CiByi1GnaVndYj1hr-EAEg
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    put:
      tags:
        - Users
      summary: updateUser
      description: updateUser
      operationId: updateuser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                picPath:
                  type: string
                  example: http://localhost:3000/files/file-1719789675679-742439663.jpg
                username:
                  type: string
                  example: rosarios2
            examples:
              updateUser:
                value:
                  picPath: http://localhost:3000/files/file-1719789675679-742439663.jpg
                  username: rosarios2
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: user_name
        in: path
        required: true
        schema:
          type: string
  /api/users/{delete_user_name}:
    delete:
      tags:
        - Users
      summary: deleteUser
      description: deleteUser
      operationId: deleteuser
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: delete_user_name
        in: path
        required: true
        schema:
          type: string
  /api/posts/new:
    post:
      tags:
        - Posts
      summary: createPost
      description: createPost
      operationId: createpost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: I suck at music! Postman Testing!
                tags:
                  type: array
                  items:
                    type: string
                    example: gaming
                  example:
                    - gaming
                    - music
                    - beginner
                title:
                  type: string
                  example: Gaming and Music LOL
            examples:
              createPost:
                value:
                  content: I suck at music! Postman Testing!
                  tags:
                    - gaming
                    - music
                    - beginner
                  title: Gaming and Music LOL
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /api/posts/{post_id}/upvote:
    put:
      tags:
        - Posts
      summary: upvotePost
      description: upvotePost
      operationId: upvotepost
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: string
  /api/posts/{post_id}:
    get:
      tags:
        - FilteringPosts
      summary: getPostById
      description: getPostById
      operationId: getpostbyid
      parameters:
        - name: ''
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    put:
      tags:
        - Posts
      summary: updatePost
      description: updatePost
      operationId: updatepost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Umm lemme change this title real quick
            examples:
              updatePost:
                value:
                  title: Umm lemme change this title real quick
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    delete:
      tags:
        - Posts
      summary: deletePost
      description: deletePost
      operationId: deletepost
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: string
  /api/posts/filter/fromuser/{user_name}:
    get:
      tags:
        - FilteringPosts
      summary: getPostByUser
      description: getPostByUser
      operationId: getpostbyuser
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: user_name
        in: path
        required: true
        schema:
          type: string
  /api/posts/filter/byupvotes/:
    get:
      tags:
        - FilteringPosts
      summary: getPostByUpvotes
      description: getPostByUpvotes
      operationId: getpostbyupvotes
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /api/posts/filter/twohoursago:
    get:
      tags:
        - FilteringPosts
      summary: getPostsLast2hrs
      description: getPostsLast2hrs
      operationId: getpostslast2hrs
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /api/posts/filter/tags:
    get:
      tags:
        - FilteringPosts
      summary: getPostByTags
      description: getPostByTags
      operationId: getpostbytags
      parameters:
        - name: time
          in: query
          schema:
            type: string
            example: '1'
        - name: sort
          in: query
          schema:
            type: string
            example: top
          description: sort by top or new
        - name: q
          in: query
          schema:
            type: string
            example: music,gaming
          description: comma separated list of tags
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /api/posts/{post_id}/comment:
    post:
      tags:
        - Comments
      summary: commentOnPost
      description: commentOnPost
      operationId: commentonpost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Wow a new comment asdlkajsd
            examples:
              commentOnPost:
                value:
                  content: Wow a new comment asdlkajsd
      responses:
        '200':
          description: ''
    parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: string
  /api/posts/{post_id}/comment/{comment_id}:
    delete:
      tags:
        - Comments
      summary: deleteCommentOnPost
      description: deleteCommentOnPost
      operationId: deletecommentonpost
      responses:
        '200':
          description: ''
    parameters:
      - name: post_id
        in: path
        required: true
        schema:
          type: string
      - name: comment_id
        in: path
        required: true
        schema:
          type: string
  /api/file/upload:
    post:
      tags:
        - Upload
      summary: userUploadFile
      description: userUploadFile
      operationId: useruploadfile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
  /files/{file_path}:
    get:
      tags:
        - Upload
      summary: getUploadedFile
      description: getUploadedFile
      operationId: getuploadedfile
      responses:
        '200':
          description: ''
      security:
        - bearerAuth: []
    parameters:
      - name: file_path
        in: path
        required: true
        schema:
          type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: Users
  - name: Posts
  - name: FilteringPosts
  - name: Comments
  - name: Upload
